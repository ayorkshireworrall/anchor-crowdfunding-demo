import * as anchor from "@coral-xyz/anchor";
import { Program, AnchorError } from "@coral-xyz/anchor";
import * as assert from "assert"
import { BN } from "bn.js";
const { SystemProgram } = anchor.web3;

import { Crowdfunding } from "../target/types/crowdfunding";

describe("crowdfunding", () => {
  // Configure the client to use the local cluster
  const provider = anchor.AnchorProvider.env();
  anchor.setProvider(provider);

  // The crowdfunding program that will be executed on the solana block chain (with type assertion as Crowdfunding - generated by anchor build)
  const program = anchor.workspace.Crowdfunding as Program<Crowdfunding>;

  let campaignPubKey;

  before(async () => {
    // only works because in these tests we create a single campaign with name Test
    [campaignPubKey] = anchor.web3.PublicKey.findProgramAddressSync(
      [anchor.utils.bytes.utf8.encode("campaign"), anchor.utils.bytes.utf8.encode("Test")],
      program.programId
    )
  })

  console.log('User wallet: ', provider.wallet.publicKey)


  it("is created", async () => {
    await program.methods
      .create('Test', 'A test crowdfunding campaign')
      .accounts({
        campaign: campaignPubKey,
        user: provider.wallet.publicKey,
        systemProgram: SystemProgram.programId
      })
      .rpc();

    const campaignAccount = await program.account.campaign.fetch(campaignPubKey);
    assert.ok(campaignAccount.name === 'Test')
    assert.ok(campaignAccount.description === 'A test crowdfunding campaign');
    console.log('Authorised campaign admin: ', campaignAccount.admin)
  });

  it('cannot create a duplicate name', async () => {
    try {
      await program.methods
        .create('Test', 'Duplicated name should fail')
        .accounts({
          campaign: campaignPubKey,
          user: provider.wallet.publicKey,
          systemProgram: SystemProgram.programId
        })
        .rpc();
    } catch (error) {
      const err: AnchorError = error;
      assert.ok('failed to send transaction: Transaction simulation failed: Error processing Instruction 0: custom program error: 0x0' === err.message); // seed constraint error doesn't seem to propagate very well so this is what is thrown
    }
  })

  it('can donate', async () => {
    const intialCampaignAccountBalance = (await program.account.campaign.getAccountInfo(campaignPubKey)).lamports; // the amount already put on the campaign when created to cover rent
    // donate 10 lamports
    await program.methods
      .donate("Test", new BN(10))
      .accounts({
        campaign: campaignPubKey,
        user: provider.wallet.publicKey,
        systemProgram: SystemProgram.programId
      })
      .rpc();

    const account = await program.account.campaign.fetch(campaignPubKey);
    assert.ok(account.amountDonated.eq(new BN(10)));
    const postDonationCampaignAccountBalance = (await program.account.campaign.getAccountInfo(campaignPubKey)).lamports;
    assert.ok(postDonationCampaignAccountBalance - intialCampaignAccountBalance === 10);
  })

  it('admin can withdraw', async () => {
    const intialCampaignAccountBalance = (await program.account.campaign.getAccountInfo(campaignPubKey)).lamports; // the amount already put on the campaign by creation and previous donations
    const campaignAccount = await program.account.campaign.fetch(campaignPubKey);
    await program.methods
      .withdraw("Test", new BN(1))
      .accounts({
        campaign: campaignPubKey,
        user: campaignAccount.admin
      })
      .rpc();

    assert.ok(campaignAccount.amountDonated.eq(new BN(10))); // amount donated should not change because it is the total amount donated
    const postWithdrawCampaignAccountBalance = (await program.account.campaign.getAccountInfo(campaignPubKey)).lamports;
    assert.ok(postWithdrawCampaignAccountBalance - intialCampaignAccountBalance === -1)
  })
});
